func trap(height []int) int {
  l := len(height)
  aMaxL := make([]int, l) // keeps max for the ith pos from left
  aMaxR := make([]int, l) // keeps max for the ith pos from right

  // fill aMaxL
  aMaxL[0]=height[0]
  for i:=1;i<l;i++{
    if aMaxL[i-1] < height[i]{
      aMaxL[i]=height[i]
    }else{
      aMaxL[i]=aMaxL[i-1]
    }
  }
  // fmt.Println(aMaxL)
  // fill aMaxR
  aMaxR[l-1]=height[l-1]
  for i:=l-2;i>=0;i--{
    if aMaxR[i+1] < height[i]{
      aMaxR[i]=height[i]
    }else{
      aMaxR[i]=aMaxR[i+1]
    }
  }
  // fmt.Println(aMaxR)

  s := 0
  for i:=1;i<l-1;i++{
    if aMaxL[i] < aMaxR[i] {
      s += aMaxL[i] - height[i]
    }else{
      s += aMaxR[i] - height[i]
    }
  }
  return s
    // space: O(n) and time: O(n)
}
