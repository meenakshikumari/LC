import (
  "sort"
//   // "reflect"
)
// func threeSum(nums []int) [][]int {
//   var res [][]int
//   l := len(nums)
  
//   // sort.Slice(nums, func(i,j int) bool {return nums[i]<nums[j]}) //sort nums

//   // for i:=0; i<l-2;i++{
//   //   if nums[i] > 0 {
//   //     break // after crossing 0 it will sum will be more than 0
//   //   }else if i != 0 && nums[i-1] == nums[i]{
//   //     continue // if previous was same digit go to next since we hv already iterated
//   //   }

//   //   h := make(map[int]int)
//   //   for j:= i+1; j<l;j++{
//   //     if nums[i] == 0 && nums[j] > 0 {
//   //       break
//   //     }

//   //     if _, ok:= h[-(nums[i]+nums[j])]; ok{
//   //       a := []int{nums[i],nums[j],-(nums[i]+nums[j])}
//   //       res = append(res, a)
//   //     }else{
//   //       h[nums[j]] = 1
//   //     }
//   //     if len(res) > 1 && reflect.DeepEqual(res[len(res)-1],res[len(res)-2]){
//   //         res = res[0:len(res)-1]
        
//   //     }
//   //   }
//   // }
//   // abv sol time: O(nlogn+n2) => O(n2)
//   // space = O(n) // hash

//   // solution without sorting the arr
//   m := make(map[[3]int]bool)
//   for i:=0; i<l-2;i++{
//     if i == 0 || nums[i-1] != nums[i]{
//     h := make(map[int]int)
//       for j:= i+1; j<l;j++{
//         if _, ok:= h[-(nums[i]+nums[j])]; ok{
//           a := []int{nums[i],nums[j],-(nums[i]+nums[j])}
//           sort.Slice(a, func(i,j int) bool {return a[i]<a[j]}) //sort nums
//           ar := [3]int{0,0,0}
//           for i, v := range a {
//             ar[i] = v
//           }
//           if _, ok := m[ar]; !ok{
//             m[ar] = true
//           } 
//         }else{
//           h[nums[j]] = 1
//         }
//       }
//     }
//   }
//   // fmt.Println(m)
//   for k := range m{
//     a := make([]int, 3)
//     for i, v := range k {
//       a[i] = v
//     }
//     res = append(res, a)
//   }
//   return res
// }
// abv time: O(n*logm) => O(N) space: O(n)+O(num of uniq triplets)*2=> O(N)

func threeSum(nums []int) [][]int {
  var res [][]int
  // sort the arr
  sort.Ints(nums)
  // fmt.Println(nums)
  l := len(nums)
  for i:=0;i<l;i++{
    if i!=0 && nums[i]==nums[i-1]{
      continue
    }
    j := i+1
    k := l-1

    for j < k {
      sum := nums[i]+nums[j]+nums[k]
      if sum == 0{
        res = append(res, []int{nums[i],nums[j],nums[k]})
        j++
        k-=1
        for j < k && nums[j] == nums[j-1]{
          j++
        }
        for j < k && nums[k] == nums[k+1]{
          k -=1
        }
      }else if sum > 0{
        k -=1
      }else{
        j++
      }
      // fmt.Println(res,i,j,k)
    }
  }
  return res
}
