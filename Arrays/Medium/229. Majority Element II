// import "sort"
func majorityElement(nums []int) []int {
// Boyer More's Voting algo
// keep 2 majority element and their counts
// time: O(n) space: O(1)

  var e1, e2, c1,c2,i int
  e1 = math.MinInt32
  e2 = math.MinInt32
  n := len(nums)

  for i < n {
    if nums[i] != e1 && nums[i] != e2 {
      if c1 == 0{
        e1 = nums[i]
        c1++
      }else if c2 == 0{
        e2 = nums[i]
        c2++
      }else{
        c1--
        c2--
      }
    }else if nums[i] == e1{
      c1++
    }else if nums[i] == e2{
      c2++
    }
    i++
  }
  //check if e1 and e2 are in majority for n/3
  var cnt1, cnt2 int
  for _, v := range nums{
    if v == e1 {
      cnt1++
    }else if v == e2 {
      cnt2++
    }
  }
  var majorityElement []int

  if cnt1 > n/3 {
    majorityElement = append(majorityElement, e1)
  }
  if cnt2 > n/3{
    majorityElement = append(majorityElement, e2)
  }
    return majorityElement

  // time: O(nlogn) space: O(1)
    // sort.Ints(nums)
    // var majorityElement []int
    // n := len(nums)
    // i:=0
    // for i<n{
    //   counter := 1
    //   for  i<len(nums)-1 && nums[i]==nums[i+1]{
    //     i++
    //     counter++
    //   }

    //   if counter >n/3 {
    //     majorityElement = append(majorityElement, nums[i])
    //   }
    //   i++
    // }
    // return majorityElement
}
