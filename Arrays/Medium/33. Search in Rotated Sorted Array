// func search(nums []int, target int) int {
//   // find partitioned  
//   l :=0
//   n:=len(nums)
//   h:=n-1
//   var mid int
//   for l<=h{ // index of pivot
//     mid = (l+h)/2
//     if nums[mid] > nums[n-1]{      
//       l = mid + 1
//     }else {
//       h = mid - 1      
//     }   
//   }
//   ans := binaryS(nums,0,l-1,target)//search left side
//   if ans != -1 {
//     return ans
//   }
//   return binaryS(nums,l,n-1,target)//search right side
// }

// func binaryS(nums []int, l,h,target int) int {
//   for l <= h{
//     m := (l+h)/2

//     if nums[m]==target{
//       return m
//     }else if nums[m] > target{
//       h = m-1
     
//     }else {
//        l = m+1
//     }
//   }
//   return -1
// }

func search(nums []int, target int) int {
  // we will be doing binary search
  // we will be checking which side is sorted (left/right)
  // check target in th sorted arr and move l/h acc
  // https://youtu.be/5qGrJbHhqFs
  // time: O(n)
  // space: O(1)
  l := 0
  n := len(nums)
  h := n-1

  for l<=h{
    m := (l+h)/2
    if nums[m] == target{
      return m
    }else if nums[m] >= nums[l] {//left sorted
      // search target in the left sorted array
      if target >= nums[l] && target < nums[m]{
        h = m-1
      }else{
        l = m+1
      }
    }else{
      if target > nums[m] && target <= nums[h]{
        l = m+1
      }else{
        h = m-1
      }
    }
  }
  return -1
}
