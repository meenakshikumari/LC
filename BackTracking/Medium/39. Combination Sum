func combinationSum(candidates []int, target int) [][]int {
    var res [][]int
    var arr []int
    // h := make(map[int][]int)
    backTrack(candidates, arr, target, &res, 0)
    return res
}

func backTrack(ip, arr []int, target int, res *[][]int, lastIdx int){
    if target < 0{
        return
    }

    if target == 0{
        temp := make([]int, len(arr))
        copy(temp, arr)
        *res = append(*res, temp)
        return
    }

    for i, v := range ip{
        if lastIdx <= i{
            arr = append(arr, v)
            backTrack(ip, arr, target-v, res, i)
            arr = arr[:len(arr)-1]
        }
    }
    return
}
