// O(logn) using Binary search
// func searchRange(nums []int, target int) []int {
//     i:=0
//     j:=len(nums)-1
//     first := -1
//     last := -1
//     for i<=j{
//         m := (i+j)/2
//         //find first occurance
//         if nums[m] >= target {
//             if nums[m] == target{
//                 first = m
//             }
//             j = m-1
//         }else{
//             i = m+1
//         }
//     }
//     i = 0
//     j = len(nums)-1
//     for i<=j{
//         m := (i+j)/2
//         //find last occurance
//         if nums[m] > target {
//             j = m-1
//         }else{
//             if nums[m] == target{
//                 last = m
//             }
//             i = m+1
//         }
//     }

//     return []int{first, last}
// }

// O(logn) using lower and upper bound
func searchRange(nums []int, target int) []int {
    first := findFirstOcc(nums, 0,len(nums)-1, target)
    if first < 0 || first > len(nums)-1 || nums[first] != target{
        return []int{-1,-1}
    }
    last := findLastOcc(nums, 0,len(nums)-1, target)
    // since upper bound is a[i] > x therefore last occ will be ub-1
    return []int{first, last-1}
}

func findFirstOcc(nums []int,i,j,target int) int {
    first := -1
    for i<=j{
        m := (i+j)/2
        if nums[m] >= target {
            first = m
            j = m-1
        }else{
            i = m+1
        }
    }
    return first
}

func findLastOcc(nums []int,i,j,target int) int{
    last := j+1
    for i<=j{
        m := (i+j)/2
        if nums[m] > target {
            last = m
            j = m-1
        }else{
            i = m+1
        }
    }
    return last
}
