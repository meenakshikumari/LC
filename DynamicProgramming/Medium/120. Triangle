import "math"
func minimumTotal(triangle [][]int) int {
    n := len(triangle)
    // we only need the previous arr for record
    previous := []int{triangle[0][0]}
    for i:=1;i<n;i++{
        curr := make([]int, i+1)
        for j:=0;j<=i;j++{
            curr[j] = triangle[i][j]
            if j==0{
                curr[j] += previous[0]
            }else if j==i{
                curr[j] += previous[j-1]
            }else{
                curr[j] += min(previous[j],previous[j-1])
            }
        }
        previous = curr
    }
    minS := math.MaxInt32
    for i:=0;i<n;i++{
        minS = min(minS,previous[i])
    }
    return minS
    // dp := make([][]int, n)
    // for i := range n{
    //     dp[i] = make([]int, i+1)
    // }
    // dp[0][0] = triangle[0][0]

    // for i:=1;i<n;i++{
    //     for j:=0;j<=i;j++{
    //         dp[i][j] = triangle[i][j]
    //         if j==0{
    //             dp[i][j] += dp[i-1][0]
    //         }else if j==i{
    //             dp[i][j] += dp[i-1][j-1]
    //         }else{
    //             dp[i][j] += min(dp[i-1][j],dp[i-1][j-1])
    //         }
    //     }
    // }
    // minS := math.MaxInt32
    // for i:=0;i<n;i++{
    //     minS = min(minS,dp[n-1][i])
    // }
    // return minS
}

// func recursion(row,col int, triangle [][]int)int{
//     if row == 0{
//         return triangle[0][0]
//     }

//     sum := triangle[row][col]
//     if col==0{
//         sum += recursion(row-1,0,triangle)
//     }else if col==row{
//         sum += recursion(row-1,col-1,triangle)
//     }else{
//         sum += min(recursion(row-1,col,triangle),recursion(row-1,col-1,triangle))
//     }
//     return sum
// }
