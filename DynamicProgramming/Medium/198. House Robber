func rob(nums []int) int {
    n := len(nums)
    if n == 1{
        return nums[0]
    }

    prev2 := nums[0]
    prev := max(nums[1],nums[0])
    if n==2{
        return prev
    }
    var curr int
    for i := 2;i<n;i++ {
        curr = max(prev2+nums[i],prev)
        prev2 = prev
        prev = curr
    }
    return curr
    dp := make([]int, n)

    dp[0] = nums[0]
    if n > 1{
        dp[1] = max(dp[1],dp[0])
    }
    for i := 2;i<n;i++ {
        pick, notPick := -1,-1
        pick = dp[i-2]+nums[i]
        notPick = dp[i-1]
        dp[i] = max(pick, notPick)
    }

    return dp[n-1]
}
