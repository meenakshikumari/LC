func rob(nums []int) int {
    //space optimised 
    n := len(nums)

    prev2 := 0 // dp[i-2]
    prev := nums[0] //dp[i-1]
    
    var curr int
    for i := 1;i<n;i++ {
        pick := nums[i]
        // if idx = 1 then pick = nums[i]+0 therefore below
        if i > 1{
            pick = prev2+pick
        }
        notPick := prev
        curr = max(pick, notPick)
        
        prev2 = prev
        prev = curr
    }
    return prev

    dp := make([]int, n)

    dp[0] = nums[0]
    if n > 1{
        dp[1] = max(dp[1],dp[0])
    }
    for i := 2;i<n;i++ {
        pick, notPick := -1,-1
        pick = dp[i-2]+nums[i]
        notPick = dp[i-1]
        dp[i] = max(pick, notPick)
    }

    return dp[n-1]
}
