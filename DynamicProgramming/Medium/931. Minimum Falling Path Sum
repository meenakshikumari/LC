func minFallingPathSum(matrix [][]int) int {
    n := len(matrix)
    previous := make([]int, n)
    previous = matrix[0]

    for i:=1;i<n;i++{
        curr := make([]int, n)
        for j:=0;j<n;j++{
            curr[j] = matrix[i][j]
            if j==0{
                curr[j] += min(previous[0], previous[1])
            }else if j==n-1{
                curr[j] += min(previous[j],previous[j-1])
            }else{
                curr[j] += min(previous[j],previous[j-1],previous[j+1])
            }
        }
        previous = curr
    }

    // dp := make([][]int, n)
    // for i := range n{
    //     dp[i] = make([]int, n)
    // }

    // for i := range n{
    //     dp[0][i] = matrix[0][i]
    // }

    // for i:=1;i<n;i++{
    //     for j:=0;j<n;j++{
    //         dp[i][j] = matrix[i][j] 
    //         if j == 0{
    //             dp[i][j] += min(dp[i-1][j], dp[i-1][j+1])
    //         }else if j==n-1{
    //             dp[i][j] += min(dp[i-1][j-1], dp[i-1][j])
    //         }else{
    //             dp[i][j] += min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])
    //         }
    //     }
    // }

    minS := math.MaxInt32
    for i:=0;i<n;i++{
        minS = min(minS,previous[i])
    }
    return minS
}
