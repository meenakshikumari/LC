func numIslands(grid [][]byte) int {
    n := len(grid)
    m := len(grid[0])
    var cnt int

    visited := make([][]int, n)
    for i:=0;i<n;i++{
        visited[i] = make([]int, m)
    }

    for i:=0;i<n;i++{
        for j:=0;j<m;j++{
            if grid[i][j] == '1' && visited[i][j] != 1{
                traverse(visited, grid,i,j)
                cnt++
            }
        }
    }
    return cnt
}

func traverse(visited [][]int, grid [][]byte, r, c int){ // bfs
    visited[r][c] = 1
    n := len(grid)
    m := len(grid[0])

    var q [][2]int
    q = append(q, [2]int{r,c})
    rL := []int{-1,0,1,0}
    cL := []int{0,-1,0,1}

    for len(q) > 0{
        nRow := q[0][0]
        nCol := q[0][1]
        q = q[1:]

        //traverse in all possible direction
        for i:=0;i<4;i++{
            row := nRow+rL[i]
            col := nCol+cL[i]
            if (row >= 0 && row < n) && (col >=0 && col < m) && (grid[row][col] == '1') && (visited[row][col] == 0){
                visited[row][col] = 1
                q = append(q, [2]int{row,col})
            }
        }
    }
}
