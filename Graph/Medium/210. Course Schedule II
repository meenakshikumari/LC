func findOrder(numCourses int, prerequisites [][]int) []int {
    //cycle detection using Kahn's Algo
    // if cycle found return false else true

    //create adjacency List
    var topoSort []int
    adjL := make(map[int][]int, numCourses)
    indegree := make([]int, numCourses)

    for _, v := range prerequisites{
        adjL[v[1]] = append(adjL[v[1]], v[0])
        indegree[v[0]]++
    }

    var q []int
    for i, node := range indegree {
        if node == 0{
            q = append(q, i)
        }
    }

    // var cnt int
    for len(q) > 0{
        node := q[0]
        q = q[1:]
        topoSort = append(topoSort, node)

        for _, n := range adjL[node]{
            indegree[n]--
            if indegree[n] == 0{
                q = append(q, n)
            }
        }
    }

    if len(topoSort) < numCourses{
        return []int{} // in case of cycle detection
    }

    return topoSort
}
