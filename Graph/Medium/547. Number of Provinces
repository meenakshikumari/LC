func findCircleNum(isConnected [][]int) int {
    return countComponents(len(isConnected), isConnected)
}

func countComponents(n int, edges [][]int) int {
    adjL := make(map[int][]int, n)

    for i, edge := range edges{
        for j, _ := range edge{
            if edges[i][j] == 1 && i != j{
            adjL[i] = append(adjL[i], j)
            }
        }
    }

    visited := make([]int, n)
    cc := 0
    for i:=0;i<n;i++{
        if !(visited[i] == 1){
            bfs(i, adjL, visited)
            cc++
        }
    }
    return cc
}

func bfs(node int, adjL map[int][]int, visited []int){
    var q []int
    q = append(q, node)
    visited[node] = 1
    for len(q) > 0{
        node = q[0]
        q = q[1:]
        for _, n := range adjL[node]{
            if !(visited[n] == 1){
                q = append(q, n)
                visited[n] = 1
            }
        }
    }
    return
}
