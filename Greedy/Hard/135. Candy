
func candy(ratings []int) int {
    //SLOPE APPROACH https://youtu.be/IIqVFvKE6RY?t=930
    sum := 1
    n := len(ratings)

    i := 1
    for i< n{
        // for flat surface
        if ratings[i] == ratings[i-1]{
            sum++
            i++
            continue
        }

        // handle the slopes
        //increasing slope
        peak := 1 // as our intial i is at 1 and sum is also 1
        for i<n && ratings[i] > ratings[i-1]{
            peak++
            sum += peak
            i++
        }

        // decreasing slope
        down := 1
        for i<n && ratings[i] < ratings[i-1]{
            sum += down
            down++
            i++
        }

        if down > peak{
            sum += (down-peak)
        }
    }
    return sum
}

func candy(ratings []int) int {
    n := len(ratings)
    candy := 0
    candies := make([]int, n)

    for i := n-1;i>=0;i--{
        if i < n-1 {
            if ratings[i] > ratings[i+1] {//checking the next right side neighbour
                candies[i] = candies[i+1]+1
            }else{
                candies[i] = 1
                j := i+1
                //checking all the right hand side are balance as per rule
                for j<n && ratings[j-1] < ratings[j] && !(candies[j-1] < candies[j]){
                    candies[j] = candies[j-1]+1
                    candy++
                    j++
                }
            }
        }else{
            candies[i] = 1
        }

        candy += candies[i]
    }
    return candy
}
