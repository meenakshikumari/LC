/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */

type q struct{
    val int
    node *ListNode
} 

func mergeKLists(lists []*ListNode) *ListNode {
    var head, curr *ListNode

    // if len(lists) < 1{
    //     return head
    // }
    var queue []*q
    for _, l := range lists{
        if l != nil{ // for [[]]
            queue = append(queue, &q{val: l.Val, node: l})
        }
    }

    for len(queue) > 0{
        node := &ListNode{
            Val: getMinInPriorityNode(queue),
            Next: nil,
        }
        if head == nil{
            head = node
        }else{
            curr.Next = node
        }
        curr = node

        // we need to fix the priority queue
        for i, qu := range queue{
            if qu.val == node.Val {
                if qu.node.Next != nil{
                    qu.node = qu.node.Next
                    qu.val = qu.node.Val
                }else{
                    queue = append(queue[:i], queue[i+1:]...)
                }
                break
            }
        }
    }
    return head
}

func getMinInPriorityNode(queue []*q)int{
    m := math.MaxInt32
    // var r int
    for _, qu := range queue{
        if m > qu.val{
            m = qu.val
        }
    }
    return m
}


------USING MINHEAP-   O(nLogn)------
import "container/heap"
type MinHeap []int

func (h MinHeap)Less(i, j int)bool{ return h[i] < h[j]}
func (h MinHeap)Swap(i, j int){  h[i], h[j] = h[j], h[i]}
func (h MinHeap)Len()int{ return len(h) }

func (h *MinHeap)Push(x interface{}){ *h = append(*h, x.(int))}
func (h *MinHeap)Pop()interface{}{
    old := *h
    n := len(old)
    x := old[n-1]
    *h = old[:n-1]
    return x
}

func mergeKLists(lists []*ListNode) *ListNode {
    // iterate over the list of elements and creatre a minheap
    // again get the min from the min heap and keep on adding to the new res list
    var head, curr *ListNode
    h := &MinHeap{}
    heap.Init(h)

    for _, v := range lists{ //nLogn
        for v != nil{
            heap.Push(h, v.Val)
            v = v.Next
        }
    }
    // min heap is created
    for h.Len() > 0{ // nLogN
        node := &ListNode{
            Val: heap.Pop(h).(int),
            Next: nil,
        }
        if head == nil{
            head = node
        }else{
            curr.Next = node
        }
        curr = node
    }

    return head
    //overall O(nLogn)
}
