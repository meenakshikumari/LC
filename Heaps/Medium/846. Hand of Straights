import "container/heap"

// type freq struct{
//     val int
//     cnt int
// }
type MinHeap []int

func (h MinHeap)Less(i, j int)bool{ return h[i] < h[j]}
func (h MinHeap)Swap(i, j int){  h[i], h[j] = h[j], h[i]}
func (h MinHeap)Len()int{ return len(h) }
func (h MinHeap)Top()int{ return h[0] }

func (h *MinHeap)Push(x interface{}){ *h = append(*h, x.(int))}
func (h *MinHeap)Pop()interface{}{
    old := *h
    n := len(old)
    x := old[n-1]
    *h = old[:n-1]
    return x
}

func isNStraightHand(hand []int, groupSize int) bool {
    if len(hand)%groupSize != 0 {
		return false
	}
    h := make(map[int]int)

    hp := &MinHeap{}
    heap.Init(hp)
    for _, v := range hand{
        h[v]++
        heap.Push(hp, v)
    }

    for hp.Len() >0{
        top := hp.Top()
        if h[top] > 0{
            var n int
            for n < groupSize{
                if v, ok := h[top+n]; !ok || v==0{
                    return false
                }
                h[top+n]--
                n++
            }
        }
        if h[top] == 0{
            heap.Pop(hp)
        }
        
    }
    return true
}
