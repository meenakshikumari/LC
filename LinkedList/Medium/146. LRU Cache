//https://www.youtube.com/watch?v=xDEuM5qa0zg&pp=ygUSbHJ1IGNhY2hlIGxlZXRjb2Rl
type Node struct {
    Key int
    Val int
    Prev *Node
    Next *Node
}

type LRUCache struct {
    Capacity int
    MapNode map[int]*Node // key will be key here
    DHead *Node
    DTail *Node
}

func Constructor(capacity int) LRUCache {
    cache := &LRUCache{
        Capacity: capacity,
        MapNode: make(map[int]*Node, capacity),
        DTail: &Node{-2,0,nil,nil},
        DHead: &Node{-1,0,nil,nil},
    }
    cache.DHead.Next = cache.DTail
    cache.DTail.Prev = cache.DHead
    return *cache
}

func (this *LRUCache) Get(key int) int {
    if val, ok := this.MapNode[key]; ok{
        this.delete(val)
        this.insert(key, val.Val)
        return val.Val
    }
    return -1
}

func (this *LRUCache) Put(key int, value int)  {
    if val, ok := this.MapNode[key]; ok{
        val.Val = value
        this.delete(val)
        this.insert(key, value)
        return
    }

    if len(this.MapNode) == this.Capacity{
        this.delete(this.DTail.Prev)
    }
    this.insert(key,value)
}

func (this *LRUCache) insert(key int, value int) { // at head
    node := &Node{Key:key,Val:value,}
    node.Next = this.DHead.Next
    node.Prev = this.DHead
    this.DHead.Next.Prev = node
    this.DHead.Next = node
    this.MapNode[key] = node
}

func (this *LRUCache) delete(node *Node){
    node.Next.Prev = node.Prev
    node.Prev.Next = node.Next
    delete(this.MapNode, node.Key)
}
