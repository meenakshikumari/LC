import "math"
func countPrimes(n int) int {
  if n<2{
      return 0
  }

  //sieve of eratotneses
  a := make([]int,n)
  a[0]=-1
  a[1]=-1
  for i:=2; i<=int(math.Sqrt(float64(n)));i++{
    if a[i] != -1{
      for j:=i*i;j<n;j+=i{
        a[j]=-1
      }
      // fmt.Println(i,a)
    }
  }

  counter := 0
  for i:=0;i<n;i++{
    if a[i]==0{
      counter++
    }
  }
  return counter

}
// func countPrimes(n int) int {
//     if n<2{
//       return 0
//     }

//     counter := 0
//     for i:=2;i<n;i++{
//       if isPrime(i){
//         counter++
//       }
//     }
//     return counter
// }

// func isPrime(n int) bool {
//   if n< 4 {
//     return true
//   }
//   if n %2 == 0 {  
//     return false
//   }
//   i:=3
//   for i <= int(math.Sqrt(float64(n))) {
//     if n % i == 0 {
//       return false
//     }
//     i += 2
//   }
//   return true
// }
// // O(n*n) time space:O(1)
