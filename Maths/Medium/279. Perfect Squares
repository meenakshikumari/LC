// func numSquares(n int) int {
//     return getMinIteration(n, prepareSqArray())
    
// }

// func getMinIteration(n int, sqArr []int) int{
//     if n < 1 {
//         return 0
//     }
//     idx := getIdxFromSqArr(n)
//     min := math.MaxInt32
//     // i := idx
//     // for i>0  {
//         var val int
//         // for n!=0 {
//             val += n/sqArr[getIdxFromSqArr(n)]
//             n = n%sqArr[idx]
//             fmt.Println(val, n)
//             val += getMinIteration(n, sqArr)
//         // }
//         // val := getNumIterations(n, i, 0, prepareSqArray())
//         // fmt.Println(val, i)
//         if min > val {
//             min = val
//         }
//         // i -= 1
//     // }
//     return min
// }
// // func getNumIterations(x, idx, val int, sqArr []int) int{
// //     fmt.Println(x,idx)
// //     if x != 0 {
// //         val += x/sqArr[idx]
// //         x = x%sqArr[idx]
// //         val += getMinIteration(x)
// //         // idx = getIdxFromSqArr(x)
// //         // return getNumIterations(x, idx, val, sqArr)
// //     }
// //     return val
// // }

// func getIdxFromSqArr(x int) int {
//     for i, val := range prepareSqArray(){
//         if val > x {
//             return i-1
//         }
//     }
//     return 0
// }

// func prepareSqArray() []int{
//     var a []int
//     a = append(a, 0)
//     for i := 1; a[i-1] <= 10000; i++{
//         a = append(a, int(math.Pow(float64(i),2)))
//     }
//     return a
// }

// // func numSquares(n int) int {
// // 	// Four-square and three-square theorems.
// // 	if isSquare(n) {
// // 		return 1
// // 	}
// // 	for n&3 == 0 { // n % 4 == 0
// // 		n >>= 2 // n /= 4
// // 	}
// // 	if n&7 == 7 { // n % 8 == 7
// // 		return 4
// // 	}

// // 	// Check if the number can be decomposed into sum of two squares.
// // 	for i := 1; i*i <= n; i++ {
// // 		if isSquare(n - i*i) {
// // 			return 2
// // 		}
// // 	}
// // 	// Bottom case of three-square theorem.
// // 	return 3
// // }

// // func isSquare(n int) bool {
// // 	var squareRootN int = (int)(math.Sqrt(float64(n)))
// // 	return squareRootN*squareRootN == n
// // }


// VIA DP https://www.youtube.com/watch?v=aZuQXkO0-XA
func numSquares(n int) int {
    dp := make([]int,n+1)
    dp[0] = 0
    dp[1] = 1

    for i:=2; i<=n; i++ {
        min := math.MaxInt32
        for j:=1; j*j<= i; j++{
            if min > dp[i-(j*j)]{
                min = dp[i-(j*j)]
            }
        }
        dp[i] = min+1
    }

    // fmt.Println(dp)
    return dp[n]
}
