func numTrees(n int) int {
    // catalan number : https://www.youtube.com/watch?v=H1qjjkm3P3c&list=PL-Jc9J83PIiEZvXCn-c5UIBvfT8dA-8EG&index=16
    dp := make([]int, n+1)
    dp[0] = 1
    dp[1] = 1
    for i:=2;i<=n;i++{
        for j:=0;j<i;j++{
            dp[i] += dp[j]*dp[i-j-1]
        }
    }
    return dp[n]
}
    // f(0) = 1 && f(1) = 1
    // h := make(map[int]int)

    // var num int
    // // iterate over 1 to n
    // // f(n) = sumation(i = 1->n)f(i-1)*f(n-i)
    // for i:=1;i<=n;i++{
    //     num += numTrees(i-1) * numTrees(n-i)
    // }
    // return num   
    // memoised the already calculated values
//     return numTreeMemo(n,h)
// }

// func numTreeMemo(n int, h map[int]int) int {
//     if val, ok := h[n]; ok {
//         return val
//     }
//     if n < 2 {
//         h[0] = 1
//         h[1] = 1
//         return 1
//     }
    // var num int
    // for i:=1;i<=n;i++{ //1
    //     left := numTreeMemo(i-1, h)//0
    //     right := numTreeMemo(n-i, h)//f(2)
    //     num += left * right
    //     h[i-1] = left
    //     h[n-i] = right
    // }
    // return num
// }
