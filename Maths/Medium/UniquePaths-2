func uniquePathsWithObstacles(obstacleGrid [][]int) int {
    m := len(obstacleGrid) //row
    n := len(obstacleGrid[0]) // col

    if obstacleGrid[0][0] == 1 {
        return 0
    }
    for i:=0; i<m ; i++ {
        if obstacleGrid[i][0] == 1 {
            // if rol or col is one and they have obstacle then no way further
            if m < 2 || n<2{ 
                return 0
            }
            obstacleGrid[i][0] = 0
            for k:=i; k<m;k++{
                obstacleGrid[k][0] = 0
            }
            break
        }else{
            obstacleGrid[i][0] = 1
        }
    }
    // fmt.Println(obstacleGrid)

    for i:=1; i<n ; i++ {
        if obstacleGrid[0][i] == 1 {
             if n < 2 || m<2{
                return 0
            }
            obstacleGrid[0][i] = 0
            for k:=i; k<n;k++{
                obstacleGrid[0][k] = 0
            }
            break
        }else{
            obstacleGrid[0][i] = 1
        }
    }
    // fmt.Println(obstacleGrid)


    for i:=1;i<m;i++{
        for j:=1; j<n;j++{
            if obstacleGrid[i][j] == 1 {
                obstacleGrid[i][j] = 0
            }else{
                obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]
            }
        }
    }
    // fmt.Println(obstacleGrid)
    return obstacleGrid[m-1][n-1]
    // O(m*n) time and space = O(1)

    // store the previous steps in double arr
    // time: O(m*n), space: O(m*n)
    // d := make([][]int, m)
    // for i:=0;i<m;i++{
    //     d[i] = make([]int, n)
    // }

    // for i:=0; i<m ; i++ {
    //     if obstacleGrid[i][0] == 1 {
    //         break
    //     }
    //     d[i][0] = 1
    // }

    // for i:=0; i<n ; i++ {
    //     if obstacleGrid[0][i]== 1 {
    //         break
    //     }
    //     d[0][i] = 1
    // }

    // for i:=1;i<m;i++{
    //     for j:=1; j<n;j++{
    //         if obstacleGrid[i][j] == 1 {
    //             d[i][j] = 0
    //         }else{
    //             d[i][j] = d[i-1][j] + d[i][j-1]
    //         }
    //     }
    // }
    // // fmt.Println(d)

    // return d[m-1][n-1]
}
