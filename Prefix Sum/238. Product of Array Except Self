func productExceptSelf(nums []int) []int {
    n := len(nums)
    // left := make([]int, n)
    // left[0] = 1
    // right := make([]int, n)
    // right[n-1] = 1

    // for i:=1;i<n;i++{
    //     left[i] = left[i-1] * nums[i-1]
    //     right[n-i-1] = right[n-i]*nums[n-i]
    // }

    ans := make([]int, n)
    ans[0] = 1
    // ans[n-1] = 1
    for i:=1;i<n;i++{
        ans[i] = ans[i-1] * nums[i-1] // 1 1 2 6     1 2 3 4
    }

    r := 1
    for i:=n-1;i>=0;i--{ // 24 12 4 1 ans[i] = ans[i] * nums[i+1]
        ans[i] = ans[i] * r
        r *= nums[i]
    }
    // ans[0] = nums[0]
    // for i:=1;i<n;i++{
    //     ans[i] = ans[i-1] * nums[i]
    // }

    // last := ans[n-1]
    // ans[n-1] = ans[n-1]/nums[n-1]
    // for i:=n-2;i>0;i--{
    //     ans[i] = nums[i+1] * ans[i-1]
    // }
    // ans[0] = last/nums[0]
    return ans
}
