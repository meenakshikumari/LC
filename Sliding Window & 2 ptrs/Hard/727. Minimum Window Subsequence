func minWindow(s1 string, s2 string) string {
    m := len(s2)
    n := len(s1)
    minLen := n+1

    if m > n {
        return ""
    }
    sIdx := -1

    //Better sliding window
    var r, l, cnt int
    // var res string
    for r < n{
        if s1[r] == s2[cnt]{
            cnt++
        
            if cnt==m {
                l = r
                // cnt -= 1
                for cnt > 0{
                    if s2[cnt-1] == s1[l]{
                        cnt -= 1
                    }
                    l -= 1
                }
                l++

                if minLen > r-l+1{
                    minLen = r-l+1
                    sIdx = l//s1[l:l+minLen]
                }
                r = l
                cnt = 0
            }
        }
        r++
    }
    // return res
    //Brute: tc: O(n^2) sp:O(1)
    // for i:=0;i<n;i++{
    //     if s1[i] != s2[0]{
    //         continue
    //     }
    //     k := 0
    //     for j:=i;j<n;j++{
    //         if s1[j] == s2[k]{
    //             k++
    //         }

    //         if k==m {
    //             if minLen > j-i+1{
    //                 minLen = j-i+1
    //                 sIdx = i
    //             } 
    //             break
    //         }
    //     }
    // }
    if minLen > n{
        return ""
    }
    return s1[sIdx:sIdx+minLen]
}
