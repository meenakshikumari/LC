func minWindow(s string, t string) string {
    m := len(t)
    n := len(s)
    minLen := n+1

    if m > n {
        return ""
    }
    sIdx := -1

    // better TC: O(2n+m) sp: O(54) // caps and small letters
    h := make(map[byte]int)
    for j, _ := range t{
        h[t[j]]++
    }
    var r, l, cnt int
    for r<n{
        if h[s[r]] > 0{
            cnt++
        }
        h[s[r]] -= 1
        for cnt == m {
            if minLen > r-l+1{
                minLen = r-l+1
                sIdx = l
            }
            
            h[s[l]]++
            if h[s[l]] > 0{
                cnt -= 1
            }
            l++
        }
        r++
    }

    //brute TC: O(n^2+nm) sp: O(54) // caps and small letters
    // for i:=0;i<n;i++{
    //     cnt := 0
    //     h := make(map[byte]int)
    //     for j, _ := range t{
    //         h[t[j]]++
    //     }
    //     for j:=i; j<n; j++{
    //         if h[s[j]] > 0{
    //             cnt++
    //         }
    //         h[s[j]] -= 1
    //         if cnt == m && minLen > j-i+1{
    //             minLen = j-i+1
    //             sIdx = i
    //             break
    //         }
    //     }
    // }
    if minLen > n{
        return ""
    }
    return s[sIdx:sIdx+minLen]
}
