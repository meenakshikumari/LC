func nextGreaterElement(nums1 []int, nums2 []int) []int {
    s := &Stack{
        top: -1,
        arr:  make([]int, len(nums2)),
    }

    h := make(map[int]int)
    for i:= len(nums2)-1; i>=0;i-- {
        if s.IsEmpty(){
            h[nums2[i]] = -1
        }else if s.Top() > nums2[i]{
            h[nums2[i]] = s.Top()
        }else{ // s.Top() < nums2[i]
            for s.Top() < nums2[i] && !s.IsEmpty(){
                s.Pop()
            }
            if s.IsEmpty(){
                h[nums2[i]] = -1
            }else{
                h[nums2[i]] = s.Top()
            }
        }
        s.Push(nums2[i])
    }

    for i, v := range nums1{
        nums1[i] = h[v]
    }
    return nums1
}

type Stack struct {
    top int
    arr []int
}

func(s *Stack)Push(val int){
    s.top++
    s.arr[s.top] = val
}

func(s *Stack)Pop(){
    if s.IsEmpty(){
        return
    }
    s.top -=1
}

func(s *Stack)Top() int{
    if s.IsEmpty(){
        return -1
    }
    return s.arr[s.top]
}

func(s *Stack)IsEmpty() bool{
    return s.top == -1
}
