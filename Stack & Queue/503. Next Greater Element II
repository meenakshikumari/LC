func nextGreaterElements(nums []int) []int {
    s := &Stack{
        top: -1,
        arr:  make([]int, len(nums)),
    }

    n := len(nums)

    res := make([]int, n)

    for i:= 2*n-1; i>=0;i-- {
        for s.Top() <= nums[i%n] && !s.IsEmpty(){
                s.Pop()
        }
        if s.IsEmpty(){
            res[i%n] = -1
        }else{
            res[i%n] = s.Top()
        }
        s.Push(nums[i%n])
    }

    return res
}

type Stack struct {
    top int
    arr []int
}

func(s *Stack)Push(val int){
    s.top++
    s.arr[s.top] = val
}

func(s *Stack)Pop(){
    if s.IsEmpty(){
        return
    }
    s.top -=1
}

func(s *Stack)Top() int{
    if s.IsEmpty(){
        return -1
    }
    return s.arr[s.top]
}

func(s *Stack)IsEmpty() bool{
    return s.top == -1
}
