func removeKdigits(num string, k int) string {
// below is using stack as arr not using push and pop op
    var stack []byte
    for i:=0; i<len(num); i++{
        for k >0 && len(stack)>0 && stack[len(stack)-1] > num[i]{
            stack = stack[:len(stack)-1]
            k -= 1
        }
        stack = append(stack, num[i])
    }

    if k > 0{
        stack = stack[:len(stack)-k]
    }
    for i:=0;i<len(stack);i++{
        if stack[i] != '0'{
            return string(stack[i:])
        }
    }
    return "0"
}


// // below is using stack push and pop op
func removeKdigits(num string, k int) string {
    n := len(num)
    var ans string
    s := &Stack{
        top: -1,
        arr: make([]int, n),
    }
    
    for i, v := range num{
        for k >0 && !s.IsEmpty() && string(v) < string(num[s.Top()]){
            s.Pop()
            k -= 1
        }
        s.Push(i)
    }

    if k >0 {
        // it will be first k-1 digits and we can remove the last k digit
        s.arr = s.arr[:s.top-k+1]
        s.top = len(s.arr)-1
    }

    // for k > 0{
    //     s.Pop()
    //     k -= 1
    // }

    for i:=0; i<=s.top;i++{
            if len(ans) < 1 && num[s.arr[i]] == 48{ // 48 ascii of 0
                continue
            }
        ans += string(num[s.arr[i]])
    }
    // we need to handle the trailing 0 before number on left side

    if len(ans) == 0{
        return "0"
    }
    return ans
}

type Stack struct{
    top int
    arr []int
}

func(s * Stack)Push(v int){
    s.top++
    s.arr[s.top] = v
}

func(s * Stack)Pop(){
    // x := s.Top()
    s.top -= 1
    // return x
}

func(s * Stack)Top() int{
    if s.IsEmpty() {
        return -1
    }
    return s.arr[s.top]
}

func(s * Stack)IsEmpty()bool{
    return s.top == -1
}
