func lengthOfLongestSubstring(s string) int {
    n := len(s)
    if n < 2{
        return n
    }
    max := 0

    // using hash O(n^2) time, space: O(n)
    // for i:=0;i<n;i++{
    //     h := make(map[byte]int)
    //     h[s[i]] = 1
    //     for j:=i+1;j<n;j++{
    //         if _, ok := h[s[j]]; ok{  
    //             break
    //         }
    //         h[s[j]] = 1
    //     } 
    //     if max < len(h){
    //         max = len(h)
    //     }
    // }

  // O(2n) time O(n) space
    h := make(map[byte]int)
    var left, right int
    for right <n && left<= right {
        if _, ok := h[s[right]]; !ok{ //not present in set
            h[s[right]] = 1
        }else{ // if found
            if len(h) > max {
                max = len(h)
            }
            for left<=right {
                delete(h, s[left])
                left++
                if _, ok := h[s[right]]; !ok{ //not present in set
                    h[s[right]] = 1
                    break
                }
            }
        }
        right++
    }

    if len(h) > max {
       max = len(h)
    }
    return max
}
