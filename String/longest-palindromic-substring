// 77 / 142 testcases passed

func longestPalindrome(s string) string {
    if len(s) < 2 {
        return s
    }else if len(s) == 2{
        if s[0] == s[1] {
            return s
        }else{
            return string(s[0])
        }
    }

    var i,j,m int
    j = len(s)-1

    for i < j {
        for i < j {
            m = i
            var a []string
            // fmt.Println("i: ",i," j: ", j, "A: ", a, " m: ", m)

            for s[i] == s[j] && i <= j{
                a = append(a, string(s[i]))
                if i == j || i+1 == j{
                    // need to add rest of the array at the end
                    l := len(a)-1
                    if i == j{
                        for k := l-1; k>=0; k--{
                            a = append(a, a[k])
                        }
                    }else{
                        for k := l; k>=0; k--{
                            a = append(a, a[k])
                        }
                    }
                    return strings.Join(a,"")
                }
                i++
                j--
                // fmt.Println("i: ",i," j: ", j, "A: ", a)
            }
            // fmt.Println("i: ",i," j: ", j, "A: ", a, " m: ", m)

            
            i = m
            j--
        }
        i++
        j = len(s)-1
        // fmt.Println("i: ",i," j: ", j)
    }
    return ""
}
