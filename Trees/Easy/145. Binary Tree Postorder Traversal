/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func postorderTraversal(root *TreeNode) []int { // using 2 stack
    var ans []int
    if root == nil {
        return ans
    }

    var s1, s2 []*TreeNode
    curr := root
    s1 = append(s1, curr)

    //iterative method
    for len(s1) > 0 && curr != nil{ //https://www.youtube.com/watch?v=2YBhNLodD8Q
        s1 = s1[:len(s1)-1] //pop from s1
        s2 = append(s2, curr)// push to s2
        if curr.Left != nil{
            s1 = append(s1, curr.Left)
        }
        if curr.Right != nil{
            s1 = append(s1, curr.Right)
        }
        if len(s1) > 0{
            curr = s1[len(s1)-1] // get the top
        }
    }

    for i:=len(s2)-1; i>=0;i--{
        ans = append(ans, s2[i].Val)
    }
    // traceTreeNode(root, &ans)
    return ans
}

//recursive 
func traceTreeNode(root *TreeNode, ans *[]int){
    if root == nil{
        return
    }

    traceTreeNode(root.Left, ans)
    traceTreeNode(root.Right, ans)
    *ans = append(*ans, root.Val)
    return 
}

 //https://www.youtube.com/watch?v=NzIGLLwZBS8 
 // using 1 stack
func postorderTraversal(root *TreeNode) []int {
    var ans []int
    if root == nil {
        return ans
    }

    var s1 []*TreeNode
    curr := root

    for  curr != nil || len(s1) > 0{
        if curr != nil{
            s1 = append(s1, curr)
            curr = curr.Left
        }else{
            temp := s1[len(s1)-1].Right
            if temp == nil{
                temp = s1[len(s1)-1] // get the top
                s1 = s1[:len(s1)-1]// pop the top
                ans = append(ans, temp.Val)
                for len(s1) > 0 && temp == s1[len(s1)-1].Right{
                    temp = s1[len(s1)-1] // get the top
                    s1 = s1[:len(s1)-1]// pop the top
                    ans = append(ans, temp.Val)
                }
            }else{
                curr = temp
            }
        }
    }
    return ans
}
