
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
import (
	"strconv"
	"strings"
)
type Codec struct {
    
}

func Constructor() Codec {
    return Codec{}
}

// Serializes a tree to a single string.
func (this *Codec) serialize(root *TreeNode) string {
    if root == nil{
        return ""
    }
    var res strings.Builder
    var q []*TreeNode
    q = append(q, root)
    res.WriteString(strconv.Itoa(root.Val))
    for len(q) > 0{
        node := q[0]
        q = q[1:]

        if node.Left == nil{
            res.WriteString(",#")
        }else{
            q = append(q, node.Left)
            res.WriteString(",")
            res.WriteString(strconv.Itoa(node.Left.Val))
        }

        if node.Right == nil{
            res.WriteString(",#")
        }else{
            q = append(q, node.Right)
            res.WriteString(",")
            res.WriteString(strconv.Itoa(node.Right.Val))
        }
    }
    return res.String()
}

// Deserializes your encoded data to tree.
func (this *Codec) deserialize(data string) *TreeNode {    
    if len(data) == 0{
        return nil
    }
    s := strings.Split(data, ",")
    v, _ := strconv.Atoi(s[0])
    root := &TreeNode{Val: v}
    var q []*TreeNode
    q = append(q, root)
    i := 1
    for len(q) > 0{
        node := q[0]
        q = q[1:]

        if s[i] == "#"{
            node.Left = nil
        }else{
            v, _ := strconv.Atoi(s[i])
            node.Left = &TreeNode{Val: v}
            q = append(q, node.Left)
        }
        i++

        if s[i] == "#"{
            node.Right = nil
        }else{
            v, _ := strconv.Atoi(s[i])
            node.Right = &TreeNode{Val: v}
            q = append(q, node.Right)
        }
        i++
    }
    return root
}


/**
 * Your Codec object will be instantiated and called as such:
 * ser := Constructor();
 * deser := Constructor();
 * data := ser.serialize(root);
 * ans := deser.deserialize(data);
 */
